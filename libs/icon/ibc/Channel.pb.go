// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: proto/core/channel/Channel.proto

package icon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State defines if a channel is in one of the following states:
// CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.
type Channel_State int32

const (
	// Default State
	Channel_STATE_UNINITIALIZED_UNSPECIFIED Channel_State = 0
	// A channel has just started the opening handshake.
	Channel_STATE_INIT Channel_State = 1
	// A channel has acknowledged the handshake step on the counterparty chain.
	Channel_STATE_TRYOPEN Channel_State = 2
	// A channel has completed the handshake. Open channels are
	// ready to send and receive packets.
	Channel_STATE_OPEN Channel_State = 3
	// A channel has been closed and can no longer be used to send or receive
	// packets.
	Channel_STATE_CLOSED Channel_State = 4
)

// Enum value maps for Channel_State.
var (
	Channel_State_name = map[int32]string{
		0: "STATE_UNINITIALIZED_UNSPECIFIED",
		1: "STATE_INIT",
		2: "STATE_TRYOPEN",
		3: "STATE_OPEN",
		4: "STATE_CLOSED",
	}
	Channel_State_value = map[string]int32{
		"STATE_UNINITIALIZED_UNSPECIFIED": 0,
		"STATE_INIT":                      1,
		"STATE_TRYOPEN":                   2,
		"STATE_OPEN":                      3,
		"STATE_CLOSED":                    4,
	}
)

func (x Channel_State) Enum() *Channel_State {
	p := new(Channel_State)
	*p = x
	return p
}

func (x Channel_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Channel_State) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_core_channel_Channel_proto_enumTypes[0].Descriptor()
}

func (Channel_State) Type() protoreflect.EnumType {
	return &file_proto_core_channel_Channel_proto_enumTypes[0]
}

func (x Channel_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Channel_State.Descriptor instead.
func (Channel_State) EnumDescriptor() ([]byte, []int) {
	return file_proto_core_channel_Channel_proto_rawDescGZIP(), []int{0, 0}
}

// Order defines if a channel is ORDERED or UNORDERED
type Channel_Order int32

const (
	// zero-value for channel ordering
	Channel_ORDER_NONE_UNSPECIFIED Channel_Order = 0
	// packets can be delivered in any order, which may differ from the order in
	// which they were sent.
	Channel_ORDER_UNORDERED Channel_Order = 1
	// packets are delivered exactly in the order which they were sent
	Channel_ORDER_ORDERED Channel_Order = 2
)

// Enum value maps for Channel_Order.
var (
	Channel_Order_name = map[int32]string{
		0: "ORDER_NONE_UNSPECIFIED",
		1: "ORDER_UNORDERED",
		2: "ORDER_ORDERED",
	}
	Channel_Order_value = map[string]int32{
		"ORDER_NONE_UNSPECIFIED": 0,
		"ORDER_UNORDERED":        1,
		"ORDER_ORDERED":          2,
	}
)

func (x Channel_Order) Enum() *Channel_Order {
	p := new(Channel_Order)
	*p = x
	return p
}

func (x Channel_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Channel_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_core_channel_Channel_proto_enumTypes[1].Descriptor()
}

func (Channel_Order) Type() protoreflect.EnumType {
	return &file_proto_core_channel_Channel_proto_enumTypes[1]
}

func (x Channel_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Channel_Order.Descriptor instead.
func (Channel_Order) EnumDescriptor() ([]byte, []int) {
	return file_proto_core_channel_Channel_proto_rawDescGZIP(), []int{0, 1}
}

// Channel defines pipeline for exactly-once packet delivery between specific
// modules on separate blockchains, which has at least one end capable of
// sending packets and one end capable of receiving packets.
type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current state of the channel end
	State Channel_State `protobuf:"varint,1,opt,name=state,proto3,enum=core.channel.Channel_State" json:"state,omitempty"`
	// whether the channel is ordered or unordered
	Ordering Channel_Order `protobuf:"varint,2,opt,name=ordering,proto3,enum=core.channel.Channel_Order" json:"ordering,omitempty"`
	// counterparty channel end
	Counterparty *Channel_Counterparty `protobuf:"bytes,3,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	// list of connection identifiers, in order, along which packets sent on
	// this channel will travel
	ConnectionHops []string `protobuf:"bytes,4,rep,name=connection_hops,json=connectionHops,proto3" json:"connection_hops,omitempty"`
	// opaque channel version, which is agreed upon during the handshake
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_core_channel_Channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_core_channel_Channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_proto_core_channel_Channel_proto_rawDescGZIP(), []int{0}
}

func (x *Channel) GetState() Channel_State {
	if x != nil {
		return x.State
	}
	return Channel_STATE_UNINITIALIZED_UNSPECIFIED
}

func (x *Channel) GetOrdering() Channel_Order {
	if x != nil {
		return x.Ordering
	}
	return Channel_ORDER_NONE_UNSPECIFIED
}

func (x *Channel) GetCounterparty() *Channel_Counterparty {
	if x != nil {
		return x.Counterparty
	}
	return nil
}

func (x *Channel) GetConnectionHops() []string {
	if x != nil {
		return x.ConnectionHops
	}
	return nil
}

func (x *Channel) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Packet defines a type that carries data across different chains through IBC
type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number corresponds to the order of sends and receives, where a Packet
	// with an earlier sequence number must be sent and received before a Packet
	// with a later sequence number.
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// identifies the port on the sending chain.
	SourcePort string `protobuf:"bytes,2,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	// identifies the channel end on the sending chain.
	SourceChannel string `protobuf:"bytes,3,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty"`
	// identifies the port on the receiving chain.
	DestinationPort string `protobuf:"bytes,4,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	// identifies the channel end on the receiving chain.
	DestinationChannel string `protobuf:"bytes,5,opt,name=destination_channel,json=destinationChannel,proto3" json:"destination_channel,omitempty"`
	// actual opaque bytes transferred directly to the application module
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	// block height after which the packet times out
	TimeoutHeight *Height `protobuf:"bytes,7,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height,omitempty"`
	// block timestamp (in nanoseconds) after which the packet times out
	TimeoutTimestamp uint64 `protobuf:"varint,8,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_core_channel_Channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_core_channel_Channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_proto_core_channel_Channel_proto_rawDescGZIP(), []int{1}
}

func (x *Packet) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Packet) GetSourcePort() string {
	if x != nil {
		return x.SourcePort
	}
	return ""
}

func (x *Packet) GetSourceChannel() string {
	if x != nil {
		return x.SourceChannel
	}
	return ""
}

func (x *Packet) GetDestinationPort() string {
	if x != nil {
		return x.DestinationPort
	}
	return ""
}

func (x *Packet) GetDestinationChannel() string {
	if x != nil {
		return x.DestinationChannel
	}
	return ""
}

func (x *Packet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Packet) GetTimeoutHeight() *Height {
	if x != nil {
		return x.TimeoutHeight
	}
	return nil
}

func (x *Packet) GetTimeoutTimestamp() uint64 {
	if x != nil {
		return x.TimeoutTimestamp
	}
	return 0
}

// PacketState defines the generic type necessary to retrieve and store
// packet commitments, acknowledgements, and receipts.
// Caller is responsible for knowing the context necessary to interpret this
// state as a commitment, acknowledgement, or a receipt.
type PacketState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel port identifier.
	PortId string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// channel unique identifier.
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// packet sequence.
	Sequence uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// embedded data that represents packet state.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PacketState) Reset() {
	*x = PacketState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_core_channel_Channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketState) ProtoMessage() {}

func (x *PacketState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_core_channel_Channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketState.ProtoReflect.Descriptor instead.
func (*PacketState) Descriptor() ([]byte, []int) {
	return file_proto_core_channel_Channel_proto_rawDescGZIP(), []int{2}
}

func (x *PacketState) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *PacketState) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *PacketState) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PacketState) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Counterparty defines a channel end counterparty
type Channel_Counterparty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// port on the counterparty chain which owns the other end of the channel.
	PortId string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// channel end on the counterparty chain
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *Channel_Counterparty) Reset() {
	*x = Channel_Counterparty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_core_channel_Channel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel_Counterparty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel_Counterparty) ProtoMessage() {}

func (x *Channel_Counterparty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_core_channel_Channel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel_Counterparty.ProtoReflect.Descriptor instead.
func (*Channel_Counterparty) Descriptor() ([]byte, []int) {
	return file_proto_core_channel_Channel_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Channel_Counterparty) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *Channel_Counterparty) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

// IdentifiedChannel defines a channel with additional port and channel
// identifier fields.
type Channel_IdentifiedChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current state of the channel end
	State Channel_State `protobuf:"varint,1,opt,name=state,proto3,enum=core.channel.Channel_State" json:"state,omitempty"`
	// whether the channel is ordered or unordered
	Ordering Channel_Order `protobuf:"varint,2,opt,name=ordering,proto3,enum=core.channel.Channel_Order" json:"ordering,omitempty"`
	// counterparty channel end
	Counterparty *Channel_Counterparty `protobuf:"bytes,3,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	// list of connection identifiers, in order, along which packets sent on
	// this channel will travel
	ConnectionHops []string `protobuf:"bytes,4,rep,name=connection_hops,json=connectionHops,proto3" json:"connection_hops,omitempty"`
	// opaque channel version, which is agreed upon during the handshake
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// port identifier
	PortId string `protobuf:"bytes,6,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// channel identifier
	ChannelId string `protobuf:"bytes,7,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *Channel_IdentifiedChannel) Reset() {
	*x = Channel_IdentifiedChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_core_channel_Channel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel_IdentifiedChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel_IdentifiedChannel) ProtoMessage() {}

func (x *Channel_IdentifiedChannel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_core_channel_Channel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel_IdentifiedChannel.ProtoReflect.Descriptor instead.
func (*Channel_IdentifiedChannel) Descriptor() ([]byte, []int) {
	return file_proto_core_channel_Channel_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Channel_IdentifiedChannel) GetState() Channel_State {
	if x != nil {
		return x.State
	}
	return Channel_STATE_UNINITIALIZED_UNSPECIFIED
}

func (x *Channel_IdentifiedChannel) GetOrdering() Channel_Order {
	if x != nil {
		return x.Ordering
	}
	return Channel_ORDER_NONE_UNSPECIFIED
}

func (x *Channel_IdentifiedChannel) GetCounterparty() *Channel_Counterparty {
	if x != nil {
		return x.Counterparty
	}
	return nil
}

func (x *Channel_IdentifiedChannel) GetConnectionHops() []string {
	if x != nil {
		return x.ConnectionHops
	}
	return nil
}

func (x *Channel_IdentifiedChannel) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Channel_IdentifiedChannel) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *Channel_IdentifiedChannel) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

var File_proto_core_channel_Channel_proto protoreflect.FileDescriptor

var file_proto_core_channel_Channel_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xcd, 0x06, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x46, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0xc2, 0x02, 0x0a, 0x11,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x71, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x59, 0x4f, 0x50, 0x45, 0x4e, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x04, 0x22, 0x4b, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x22, 0xc5, 0x02, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3a, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x75, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x14, 0x5a, 0x12, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x69, 0x63, 0x6f, 0x6e, 0x2f, 0x69, 0x62, 0x63,
	0x3b, 0x69, 0x63, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_core_channel_Channel_proto_rawDescOnce sync.Once
	file_proto_core_channel_Channel_proto_rawDescData = file_proto_core_channel_Channel_proto_rawDesc
)

func file_proto_core_channel_Channel_proto_rawDescGZIP() []byte {
	file_proto_core_channel_Channel_proto_rawDescOnce.Do(func() {
		file_proto_core_channel_Channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_core_channel_Channel_proto_rawDescData)
	})
	return file_proto_core_channel_Channel_proto_rawDescData
}

var file_proto_core_channel_Channel_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_core_channel_Channel_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_core_channel_Channel_proto_goTypes = []interface{}{
	(Channel_State)(0),                // 0: core.channel.Channel.State
	(Channel_Order)(0),                // 1: core.channel.Channel.Order
	(*Channel)(nil),                   // 2: core.channel.Channel
	(*Packet)(nil),                    // 3: core.channel.Packet
	(*PacketState)(nil),               // 4: core.channel.PacketState
	(*Channel_Counterparty)(nil),      // 5: core.channel.Channel.Counterparty
	(*Channel_IdentifiedChannel)(nil), // 6: core.channel.Channel.IdentifiedChannel
	(*Height)(nil),                    // 7: core.client.Height
}
var file_proto_core_channel_Channel_proto_depIdxs = []int32{
	0, // 0: core.channel.Channel.state:type_name -> core.channel.Channel.State
	1, // 1: core.channel.Channel.ordering:type_name -> core.channel.Channel.Order
	5, // 2: core.channel.Channel.counterparty:type_name -> core.channel.Channel.Counterparty
	7, // 3: core.channel.Packet.timeout_height:type_name -> core.client.Height
	0, // 4: core.channel.Channel.IdentifiedChannel.state:type_name -> core.channel.Channel.State
	1, // 5: core.channel.Channel.IdentifiedChannel.ordering:type_name -> core.channel.Channel.Order
	5, // 6: core.channel.Channel.IdentifiedChannel.counterparty:type_name -> core.channel.Channel.Counterparty
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_proto_core_channel_Channel_proto_init() }
func file_proto_core_channel_Channel_proto_init() {
	if File_proto_core_channel_Channel_proto != nil {
		return
	}
	file_proto_core_client_Client_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_core_channel_Channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_core_channel_Channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_core_channel_Channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_core_channel_Channel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel_Counterparty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_core_channel_Channel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel_IdentifiedChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_core_channel_Channel_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_core_channel_Channel_proto_goTypes,
		DependencyIndexes: file_proto_core_channel_Channel_proto_depIdxs,
		EnumInfos:         file_proto_core_channel_Channel_proto_enumTypes,
		MessageInfos:      file_proto_core_channel_Channel_proto_msgTypes,
	}.Build()
	File_proto_core_channel_Channel_proto = out.File
	file_proto_core_channel_Channel_proto_rawDesc = nil
	file_proto_core_channel_Channel_proto_goTypes = nil
	file_proto_core_channel_Channel_proto_depIdxs = nil
}
